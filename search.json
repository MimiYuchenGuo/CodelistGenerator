[{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 CodelistGenerator authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/Introduction_to_CodelistGenerator.html","id":"creating-a-codelist-for-dementia","dir":"Articles","previous_headings":"","what":"Creating a codelist for dementia","title":"Introduction to CodelistGenerator","text":"example going generate candidate codelist dementia, looking codes condition domain.","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/Introduction_to_CodelistGenerator.html","id":"getting-the-omop-cdm-vocabularies","dir":"Articles","previous_headings":"","what":"Getting the OMOP CDM vocabularies","title":"Introduction to CodelistGenerator","text":"ready access database data OMOP CDM format (necessarily contain vocabulary tables), first need obtain OMOP CDM vocabularies https://athena.ohdsi.org. downloaded, can make vocabulary database like : structure tables described detail : https://ohdsi.github.io/CommonDataModel/cdm53.html#Vocabulary_Tables","code":"library(readr) library(DBI) library(RSQLite) library(here) vocab.folder<-Sys.getenv(\"omop_cdm_vocab_path\") # path to directory of unzipped files concept<-read_delim(paste0(vocab.folder,\"/CONCEPT.csv\"),      \"\\t\", escape_double = FALSE, trim_ws = TRUE) concept_relationship<-read_delim(paste0(vocab.folder,\"/CONCEPT_RELATIONSHIP.csv\"),      \"\\t\", escape_double = FALSE, trim_ws = TRUE)  concept_ancestor<-read_delim(paste0(vocab.folder,\"/CONCEPT_ANCESTOR.csv\"),      \"\\t\", escape_double = FALSE, trim_ws = TRUE) concept_synonym<-read_delim(paste0(vocab.folder,\"/CONCEPT_SYNONYM.csv\"),      \"\\t\", escape_double = FALSE, trim_ws = TRUE) vocabulary<-read_delim(paste0(vocab.folder,\"/VOCABULARY.csv\"),      \"\\t\", escape_double = FALSE, trim_ws = TRUE)  db <- dbConnect(RSQLite::SQLite(), \":memory:\") dbWriteTable(db, \"concept\", concept, overwrite=TRUE) dbWriteTable(db, \"concept_relationship\", concept_relationship, overwrite=TRUE) dbWriteTable(db, \"concept_ancestor\", concept_ancestor, overwrite=TRUE) dbWriteTable(db, \"concept_synonym\", concept_synonym, overwrite=TRUE) dbWriteTable(db, \"vocabulary\", vocabulary) rm(concept,concept_relationship, concept_ancestor, concept_synonym, vocabulary) vocabulary_database_schema<-\"main\""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/Introduction_to_CodelistGenerator.html","id":"check-version-of-the-vocabularies","dir":"Articles","previous_headings":"","what":"Check version of the vocabularies","title":"Introduction to CodelistGenerator","text":"important note results CodelistGenerator specific particular version OMOP CDM vocabularies. can see version vocabulary used like ","code":"get_vocab_version(db=db,                   vocabulary_database_schema = \"main\") #> [1] \"v5.0 04-FEB-22\""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/Introduction_to_CodelistGenerator.html","id":"codelist-from-dementia-4182210-and-its-descendants","dir":"Articles","previous_headings":"","what":"Codelist from “Dementia” (4182210) and its descendants","title":"Introduction to CodelistGenerator","text":"simplest approach identifying potential codes take high-level code include descendents. looks pick relevant codes. , approach misses codes aren´t descendant 4182210. example, codes “Wandering due dementia” (37312577; https://athena.ohdsi.org/search-terms/terms/37312577) “Anxiety due dementia” (37312031; https://athena.ohdsi.org/search-terms/terms/37312031) aren´t picked .","code":"library(dplyr) library(stringr) library(DT) library(kableExtra) codes_from_descendants<-tbl(db,    sql(paste0(\"SELECT * FROM \",      vocabulary_database_schema,      \".concept_ancestor\"))) %>%    filter(ancestor_concept_id==\"4182210\") %>%    select(\"descendant_concept_id\") %>%    rename(\"concept_id\"=\"descendant_concept_id\") %>%    left_join(tbl(db, sql(paste0(\"SELECT * FROM \",      vocabulary_database_schema,      \".concept\"))))%>%   select(\"concept_id\", \"concept_name\",           \"domain_id\", \"vocabulary_id\") %>%    collect() datatable(codes_from_descendants,           rownames=FALSE,           options = list(pageLength = 10,                          lengthMenu = c(10, 20,50)))"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/Introduction_to_CodelistGenerator.html","id":"generating-a-candidate-codelist-using-codelist-generator","dir":"Articles","previous_headings":"","what":"Generating a candidate codelist using Codelist Generator","title":"Introduction to CodelistGenerator","text":"try include terms included can use CodelistGenerator. First, let’s simple search single keyword “dementia” without exclusions, without searching synonyms, including descendents ancestors. difference codelist one 4182210 descendants? extra codes picked CodelistGenerator?","code":"library(CodelistGenerator) dementia_codes1<-get_candidate_codes(keywords=\"dementia\",                     domains=\"Condition\",                     search_synonyms = FALSE,                     fuzzy_match = FALSE,                     exclude = NULL,                     include_descendants = TRUE,                     include_ancestor = FALSE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) datatable(dementia_codes1,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) )) code_comparison<-full_join(codes_from_descendants  %>% mutate(type1=\"4182210 and descendants\"),                       dementia_codes1  %>% mutate(type2=\"CodelistGenerator\")) %>%    mutate(type=ifelse(!is.na(type1) & !is.na(type2),                      \"Both\",               ifelse(!is.na(type1) & is.na(type2),                      \"Only 4182210 and descendants\",               ifelse(is.na(type1) & !is.na(type2),                      \"Only CodelistGenerator\",                      NA)))) %>%    select(-c(\"type1\",\"type2\")) kable(code_comparison %>%    group_by(type) %>%    tally()) datatable(code_comparison %>%              filter(type==\"Only CodelistGenerator\"),           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/Introduction_to_CodelistGenerator.html","id":"review-mappings-from-source-vocabularies","dir":"Articles","previous_headings":"","what":"Review mappings from source vocabularies","title":"Introduction to CodelistGenerator","text":"Perhaps want see ICD10CM codes map candidate codelist. can get running","code":"icd_mappings<-show_mappings(candidate_codelist=dementia_codes4,                     source_vocabularies=\"ICD10CM\",                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) datatable(icd_mappings,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) )) read_mappings<-show_mappings(candidate_codelist=dementia_codes4,                     source_vocabularies=\"Read\",                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) datatable(read_mappings,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/Options_for_CodelistGenerator.html","id":"creating-a-codelist-for-osteoarthritis","dir":"Articles","previous_headings":"","what":"Creating a codelist for osteoarthritis","title":"Options for CodelistGenerator","text":"example going generate candidate codelist osteoarthritis.","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/Options_for_CodelistGenerator.html","id":"set-up","dir":"Articles","previous_headings":"","what":"Set up","title":"Options for CodelistGenerator","text":"","code":"library(readr) library(DBI) library(RSQLite) library(here) # postgres database connection details server_dbi<-Sys.getenv(\"SERVER_DBI_FEB22\") user<-Sys.getenv(\"DB_USER_FEB22\") password<- Sys.getenv(\"DB_PASSWORD_FEB22\") port<-Sys.getenv(\"DB_PORT_FEB22\") host<-Sys.getenv(\"DB_HOST_FEB22\")  db <- dbConnect(RPostgres::Postgres(),                 dbname = server_dbi,                 port = port,                 host = host,                 user = user,                 password = password)  # name of vocabulary schema vocabulary_database_schema<-\"omop21t2_cmbd\""},{"path":[]},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/Options_for_CodelistGenerator.html","id":"condition-domain-without-searching-synonyms-without-fuzzy-match-with-exclusions-without-including-descendants-or-ancestor","dir":"Articles","previous_headings":"Search strategies","what":"Condition domain, without searching synonyms, without fuzzy match, with exclusions, without including descendants or ancestor","title":"Options for CodelistGenerator","text":"start search “osteoarthritis”, excluding “post-infection” “post-traumatic”, without searching synonyms, without fuzzy match, without including descendants direct ancestor included concepts. candidate codelist?","code":"oa_codes1<-get_candidate_codes(keywords=\"osteoarthritis\",                     domains=\"Condition\",                     search_synonyms = FALSE,                     fuzzy_match = FALSE,                     exclude = c(\"post-infection\",                                 \"post-traumatic\"),                     include_descendants = FALSE,                     include_ancestor = FALSE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) datatable(oa_codes1,           options = list(pageLength = 10,                          lengthMenu = c(10, 20,250)))"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/Options_for_CodelistGenerator.html","id":"including-descendants","dir":"Articles","previous_headings":"Search strategies","what":"Including descendants","title":"Options for CodelistGenerator","text":"Now also include descendants included concepts. new codes pick ?","code":"oa_codes2<-get_candidate_codes(keywords=\"osteoarthritis\",                     domains=\"Condition\",                     search_synonyms = FALSE,                     fuzzy_match = FALSE,                     exclude = c(\"post-infection\",                                 \"post-traumatic\"),                     include_descendants = TRUE,                     include_ancestor = FALSE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) new_codes_1_2<-bind_rows(oa_codes1, oa_codes2) %>%    group_by(concept_id) %>%    mutate(seq=length(concept_name)) %>%   filter(seq==1) datatable(new_codes_1_2,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/Options_for_CodelistGenerator.html","id":"including-observation-domain","dir":"Articles","previous_headings":"Search strategies","what":"Including observation domain","title":"Options for CodelistGenerator","text":"Now search observation domain well condition domain. new codes pick ?","code":"oa_codes3<-get_candidate_codes(keywords=\"osteoarthritis\",                     domains=c(\"Condition\",\"Observation\"),                     search_synonyms = FALSE,                     fuzzy_match = FALSE,                     fuzzy_match_max_distance=0.1,                     exclude = c(\"post-infection\",                                 \"post-traumatic\"),                     include_descendants = FALSE,                     include_ancestor = FALSE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) new_codes_1_3<-bind_rows(oa_codes1, oa_codes3) %>%    group_by(concept_id) %>%    mutate(seq=length(concept_name)) %>%   filter(seq==1) datatable(new_codes_1_3,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/Options_for_CodelistGenerator.html","id":"search-synonyms","dir":"Articles","previous_headings":"Search strategies","what":"Search synonyms","title":"Options for CodelistGenerator","text":"Now search concept synonym table identify concepts include. new codes pick ?","code":"oa_codes4<-get_candidate_codes(keywords=\"osteoarthritis\",                     domains=\"Condition\",                     search_synonyms = TRUE,                     fuzzy_match = FALSE,                     fuzzy_match_max_distance=0.1,                     exclude = c(\"post-infection\",                                 \"post-traumatic\"),                     include_descendants = FALSE,                     include_ancestor = FALSE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) new_codes_1_4<-bind_rows(oa_codes1, oa_codes4) %>%    group_by(concept_id) %>%    mutate(seq=length(concept_name)) %>%   filter(seq==1) datatable(new_codes_1_4,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/Options_for_CodelistGenerator.html","id":"using-a-fuzzy-search","dir":"Articles","previous_headings":"Search strategies","what":"Using a fuzzy search","title":"Options for CodelistGenerator","text":"Now use approximate search. See https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/agrep details (running hood). Note, set default max distance 0.1 (equivalent 10% pattern length). new codes pick ?","code":"oa_codes5<-get_candidate_codes(keywords=\"osteoarthritis\",                     domains=\"Condition\",                     search_synonyms = FALSE,                     fuzzy_match = TRUE,                     fuzzy_match_max_distance=0.1,                     exclude = c(\"post-infection\",                                 \"post-traumatic\"),                     include_descendants = FALSE,                     include_ancestor = FALSE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) new_codes_1_5<-bind_rows(oa_codes1, oa_codes5) %>%    group_by(concept_id) %>%    mutate(seq=length(concept_name)) %>%   filter(seq==1) datatable(new_codes_1_5,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/Options_for_CodelistGenerator.html","id":"using-a-more-generous-fuzzy-search","dir":"Articles","previous_headings":"Search strategies","what":"Using a more generous fuzzy search","title":"Options for CodelistGenerator","text":"widen approximate searching, increasing maximum distance allowed match 0.2 (equivalent 20% pattern length). new codes pick ?","code":"oa_codes6<-get_candidate_codes(keywords=\"osteoarthritis\",                     domains=\"Condition\",                     search_synonyms = FALSE,                     fuzzy_match = TRUE,                     fuzzy_match_max_distance=0.2,                     exclude = c(\"post-infection\",                                 \"post-traumatic\"),                     include_descendants = FALSE,                     include_ancestor = FALSE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) new_codes_1_6<-bind_rows(oa_codes1, oa_codes6) %>%    group_by(concept_id) %>%    mutate(seq=length(concept_name)) %>%   filter(seq==1) datatable(new_codes_1_6,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/Options_for_CodelistGenerator.html","id":"include-ancestor","dir":"Articles","previous_headings":"Search strategies","what":"Include ancestor","title":"Options for CodelistGenerator","text":"Now include direct ancestor included terms. new codes pick ?","code":"oa_codes7<-get_candidate_codes(keywords=\"osteoarthritis\",                     domains=\"Condition\",                     search_synonyms = FALSE,                     fuzzy_match = FALSE,                     fuzzy_match_max_distance=0.1,                     exclude = c(\"post-infection\",                                 \"post-traumatic\"),                     include_descendants = FALSE,                     include_ancestor = TRUE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) new_codes_1_7<-bind_rows(oa_codes1, oa_codes7) %>%    group_by(concept_id) %>%    mutate(seq=length(concept_name)) %>%   filter(seq==1) datatable(new_codes_1_7,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edward Burn. Author, maintainer.","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Burn E (2022). CodelistGenerator: Generate candidate codelists OMOP CDM. R package version 0.0.0.9000, https://oxford-pharmacoepi.github.io/CodelistGenerator/.","code":"@Manual{,   title = {CodelistGenerator: Generate candidate codelists for the OMOP CDM},   author = {Edward Burn},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://oxford-pharmacoepi.github.io/CodelistGenerator/}, }"},{"path":[]},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Generate candidate codelists for the OMOP CDM","text":"goal CodelistGenerator create candidate set codes generating phenotype OMOP CDM. well using package R, corresponding RShiny app creating candidate codelists using OMOP CDM condition (https://dpa-pde-oxford.shinyapps.io/OmopCodelistGeneratorConditions/), observation (add), measurement (add), procedures (add) available.","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate candidate codelists for the OMOP CDM","text":"can install development version CodelistGenerator like :","code":"install.packages(\"remotes\") remotes::install_github(\"oxford-pharmacoepi/CodelistGenerator\")"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Generate candidate codelists for the OMOP CDM","text":"","code":"# Note, Eunomia, used in the example below, does not include a full set of vocabularies.  library(CodelistGenerator) library(dplyr) library(Eunomia) library(RSQLite) library(DBI) untar(xzfile(system.file(\"sqlite\", \"cdm.tar.xz\", package = \"Eunomia\"), open = \"rb\"),         exdir =  tempdir()) db <- dbConnect(RSQLite::SQLite(), paste0(tempdir(),\"\\\\cdm.sqlite\")) get_candidate_codes(keywords=\"asthma\",                     db=db,                     vocabulary_database_schema = \"main\") #> # A tibble: 3 x 4 #>   concept_id concept_name     domain_id vocabulary_id #>        <dbl> <chr>            <chr>     <chr>         #> 1    4051466 Childhood asthma Condition SNOMED        #> 2     317009 Asthma           Condition SNOMED        #> 3    4062501 Asthma screening Procedure SNOMED"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/clean_words.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare words for search — clean_words","title":"Prepare words for search — clean_words","text":"Prepare words search","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/clean_words.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare words for search — clean_words","text":"","code":"clean_words(words)"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/clean_words.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare words for search — clean_words","text":"words character vector.","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/get_candidate_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate candidate codelist for the OMOP CDM — get_candidate_codes","title":"Generate candidate codelist for the OMOP CDM — get_candidate_codes","text":"function generates set codes can considered creating phenotype using OMOP CDM.","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/get_candidate_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate candidate codelist for the OMOP CDM — get_candidate_codes","text":"","code":"get_candidate_codes(   keywords,   domains = c(\"Condition\", \"Drug\", \"Device\", \"Observation\", \"Procedure\"),   search_synonyms = FALSE,   fuzzy_match = FALSE,   fuzzy_match_max_distance = 0.1,   exclude = NULL,   include_descendants = TRUE,   include_ancestor = FALSE,   verbose = FALSE,   db,   vocabulary_database_schema )"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/get_candidate_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate candidate codelist for the OMOP CDM — get_candidate_codes","text":"keywords Character vector words search . one word given (e.g. \"knee osteoarthritis\"), combinations words identified positions (e.g. \"osteoarthritis knee\") identified. domains Character vector one OMOP CDM domain. search_synonyms Either TRUE FALSE. TRUE code also search via concept synonym table. fuzzy_match Either TRUE FALSE. TRUE fuzzy matching used, approximate matches identified. fuzzy_match_max_distance maximum distance parameter fuzzy matching (see ??base::agrep details). exclude Character vector words identify concepts exclude. include_descendants Either TRUE FALSE. TRUE descendant concepts identified concepts included candidate codelist. include_ancestor Either TRUE FALSE. TRUE direct ancestor concepts identified concepts included candidate codelist. verbose Either TRUE FALSE. TRUE, progress printed. db Database connection via DBI::dbConnect() vocabulary_database_schema Name database schema vocab tables","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/get_candidate_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate candidate codelist for the OMOP CDM — get_candidate_codes","text":"Dataframe","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/get_candidate_codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate candidate codelist for the OMOP CDM — get_candidate_codes","text":"","code":"### note, Eunomia, used in the example below, does not include a full set of vocabularies. ### The full set can be downloaded from https://athena.ohdsi.org if (FALSE) { library(Eunomia) library(DBI) library(RSQLite) untar(xzfile(system.file(\"sqlite\", \"cdm.tar.xz\", package = \"Eunomia\"), open = \"rb\"),        exdir =  tempdir()) db <- DBI::dbConnect(RSQLite::SQLite(), paste0(tempdir(),\"\\\\cdm.sqlite\")) get_candidate_codes(keywords=\"asthma\",                    search_synonyms=TRUE,                              fuzzy_match=TRUE,                              exclude=NULL,                              include_descendants=TRUE,                              include_ancestor=FALSE,                    db=db,                    vocabulary_database_schema = \"main\") }"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/get_vocab_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Get vocabulary version — get_vocab_version","title":"Get vocabulary version — get_vocab_version","text":"Get vocabulary version","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/get_vocab_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get vocabulary version — get_vocab_version","text":"","code":"get_vocab_version(db, vocabulary_database_schema)"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/get_vocab_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get vocabulary version — get_vocab_version","text":"db Database connection via DBI::dbConnect() vocabulary_database_schema Name database schema vocab tables","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/get_vocab_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get vocabulary version — get_vocab_version","text":"Character vector","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/get_vocab_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get vocabulary version — get_vocab_version","text":"","code":"library(Eunomia) #> Loading required package: DatabaseConnector library(DBI) library(RSQLite) if (FALSE) { untar(xzfile(system.file(\"sqlite\", \"cdm.tar.xz\", package = \"Eunomia\"), open = \"rb\"),        exdir =  tempdir()) db <- DBI::dbConnect(RSQLite::SQLite(), paste0(tempdir(),\"\\\\cdm.sqlite\")) get_vocab_version(db=db,                   vocabulary_database_schema = \"main\") }"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/show_mappings.html","id":null,"dir":"Reference","previous_headings":"","what":"Show mappings from source vocabularies to standard — show_mappings","title":"Show mappings from source vocabularies to standard — show_mappings","text":"Show mappings source vocabularies standard","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/show_mappings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show mappings from source vocabularies to standard — show_mappings","text":"","code":"show_mappings(   candidate_codelist,   source_vocabularies = c(\"ATC\", \"ICD10CM\", \"ICD10PCS\", \"ICD9CM\", \"ICD9Proc\", \"LOINC\",     \"OPCS4\", \"Read\", \"RxNorm\", \"RxNorm Extension\", \"SNOMED\"),   db,   vocabulary_database_schema )"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/show_mappings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show mappings from source vocabularies to standard — show_mappings","text":"candidate_codelist Dataframe source_vocabularies Character vector db Database connection via DBI::dbConnect() vocabulary_database_schema Name database schema vocab tables","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/show_mappings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show mappings from source vocabularies to standard — show_mappings","text":"Dataframe","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/show_mappings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show mappings from source vocabularies to standard — show_mappings","text":"","code":"### note, Eunomia, which is used for the example below, ### does not include a full set of vocabularies. ### The full set can be downloaded from https://athena.ohdsi.org library(Eunomia) library(RSQLite) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(DBI) untar(xzfile(system.file(\"sqlite\", \"cdm.tar.xz\", package = \"Eunomia\"), open = \"rb\"),      exdir =  tempdir()) db <- DBI::dbConnect(RSQLite::SQLite(), paste0(tempdir(),\"\\\\cdm.sqlite\")) asthma_codes<-get_candidate_codes(keywords=\"asthma\",                  db=db,                  vocabulary_database_schema = \"main\") #> Error: no such table: main.concept show_mappings(candidate_codelist= asthma_codes,                  db=db,                  vocabulary_database_schema = \"main\") #> Error in isTRUE(lhs): object 'asthma_codes' not found"}]
